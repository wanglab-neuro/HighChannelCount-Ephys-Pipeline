params.executor = "slurm"

// define your preferred queues here
params.default_queue = 'my-queue-name'  // Default queue
params.gpu_queue = null  // Optional: Only set if GPU queue is needed and different from default queue


process {
    executor = 'slurm'
    queue = params.default_queue  // Default queue assignment
    debug = true

    // this could be needed if the NextFlow workdir is outside of the user home folder
    // containerOptions = "--bind \$HOME:\$HOME"

    // change max forks for specific processes to allow multiple forks
    withName: job_dispatch {
        cpus=4
        memory='32 GB'
        time='1h'
    }
    // time can be specified as absolute time (e.g. '1h') or as relative to the recording duration
    // e.g. time={ max_duration_minutes.toFloat()*4 + 'm' } means 4x recording duration
    withName: preprocessing {
        cpus=16
        memory='64 GB'
        // Allocate 4x recording duration
        time={ max_duration_minutes.toFloat()*4 + 'm' }
    }
    withName: spikesort_kilosort4 {
        cpus=16
        memory='64 GB'
        containerOptions='--nv'
        clusterOptions='--gres=gpu:1'
        queue=params.gpu_queue ?: params.default_queue
        // Some systems may require 'module cuda' directive
        // module cuda
        // Allocate 4x recording duration
        time={ max_duration_minutes.toFloat()*4 + 'm' }
    }
    withName: spikesort_kilosort25 {
        cpus=16
        memory='64 GB'
        containerOptions='--nv'
        clusterOptions='--gres=gpu:1'
        queue=params.gpu_queue ?: params.default_queue
        // Some systems may require 'module cuda' directive
        // module cuda
        // Allocate 4x recording duration
        time={ max_duration_minutes.toFloat()*4 + 'm' }
    }
    withName: spikesort_spykingcircus2 {
        cpus=16
        memory='64 GB'
        // Allocate 4x recording duration
        time={ max_duration_minutes.toFloat()*4 + 'm' }
    }
    withName: postprocessing {
        cpus=16
        memory='64 GB'
        // Allocate 4x recording duration
        time={ max_duration_minutes.toFloat()*4 + 'm' }
    }
    withName: curation {
        cpus=4
        memory='32 GB'
        // Allocate 10min per recording hour. Minimum 10m
        time={ max_duration_minutes.toFloat()/6 > 10 ? max_duration_minutes.value.toFloat()/6 + 'm' : '10m' }
    }
    withName: visualization {
        cpus=4
        memory='32 GB'
        // Allocate 2h per recording hour
        time={ max_duration_minutes.toFloat()*2 + 'm' }
    }
    withName: results_collector {
        cpus=4
        memory='32 GB'
        // Allocate 1x recording duration
        time={ max_duration_minutes.toFloat() > 10 ? max_duration_minutes.toFloat() + 'm' : '10m' }
    }
    withName: quality_control {
        cpus=16
        memory='64 GB'
        // Allocate 2h per recording hour
        time={ max_duration_minutes.toFloat()*2 + 'm' }
    }
    withName: quality_control_collector {
        cpus=4
        memory='32 GB'
        // Allocate 10min per recording hour. Minimum 10m
        time={ max_duration_minutes.toFloat()/6 > 10 ? max_duration_minutes.toFloat()/6 + 'm' : '10m' }
    }
    withName: nwb_subject {
        cpus=4
        memory='32 GB'
        // Allocate 10min per recording hour. Minimum 10m
        time={ max_duration_minutes.toFloat()/6 > 10 ? max_duration_minutes.toFloat()/6 + 'm' : '10m' }
    }
    withName: nwb_ecephys {
        cpus=16
        memory='64 GB'
        // Allocate 2x recording duration
        time={ max_duration_minutes.toFloat()*2 + 'm' }
    }
    withName: nwb_units {
        cpus=4
        memory='32 GB'
        // Allocate 2x recording duration
        time={ max_duration_minutes.toFloat()*2 + 'm' }
    }
}

singularity {
    enabled = true
    autoMounts = true
    singularity.enabled = true
    singularity.autoMounts = true
    platform = 'linux/amd64'
    envWhitelist = ['KACHERY_ZONE', 'KACHERY_API_KEY', 'NUMBA_CACHE_DIR']
}

dag {
    enabled = true
    file = RESULTS_PATH + '/nextflow/dag.html'
    overwrite = true
}

report {
    enabled = true
    file = RESULTS_PATH + '/nextflow/report.html'
    overwrite = true
}

timeline {
    enabled = true
    file = RESULTS_PATH + '/nextflow/timeline.html'
    overwrite = true
}

trace {
    enabled = true
    file = RESULTS_PATH + '/nextflow/trace.txt'
    overwrite = true
}
